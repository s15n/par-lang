type Nat = recursive either {
  .zero!
  .add1 self
}

dec zero : Nat
dec add1 : [Nat] Nat
dec add  : [Nat, Nat] Nat

def zero = .zero!
def add1 = [n] .add1 n

def add = [n1, n2] n1 begin {
  .zero!   => n2,
  .add1 n1 => add1(n1 loop)
}

type Seq<T> = iterative {
  .close => !
  .next  => (T) self
}

dec fibonacci : Seq<Nat>
def fibonacci =
  let (a) b = (zero) add1(zero)
  in begin {
    .close => !
    .next =>
      let (a) b = (b) add(a, b)
      in (a) loop
  }
